//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TraderMarket.UserService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserService.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/isAuthenticationValid", ReplyAction="http://tempuri.org/IUserService/isAuthenticationValidResponse")]
        bool isAuthenticationValid(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/isAuthenticationValid", ReplyAction="http://tempuri.org/IUserService/isAuthenticationValidResponse")]
        System.Threading.Tasks.Task<bool> isAuthenticationValidAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddUser", ReplyAction="http://tempuri.org/IUserService/AddUserResponse")]
        void AddUser(string username, string password, string email, string name, string surname, string postcode, string town, long contactno, string residence, string street, string countrid, bool handlesdeliver, long accountnumber, string commission);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddUser", ReplyAction="http://tempuri.org/IUserService/AddUserResponse")]
        System.Threading.Tasks.Task AddUserAsync(string username, string password, string email, string name, string surname, string postcode, string town, long contactno, string residence, string street, string countrid, bool handlesdeliver, long accountnumber, string commission);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/DoesUsernameExist", ReplyAction="http://tempuri.org/IUserService/DoesUsernameExistResponse")]
        bool DoesUsernameExist(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/DoesUsernameExist", ReplyAction="http://tempuri.org/IUserService/DoesUsernameExistResponse")]
        System.Threading.Tasks.Task<bool> DoesUsernameExistAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/DoesEmailExist", ReplyAction="http://tempuri.org/IUserService/DoesEmailExistResponse")]
        bool DoesEmailExist(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/DoesEmailExist", ReplyAction="http://tempuri.org/IUserService/DoesEmailExistResponse")]
        System.Threading.Tasks.Task<bool> DoesEmailExistAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUser", ReplyAction="http://tempuri.org/IUserService/GetUserResponse")]
        Commonlayer.User GetUser(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUser", ReplyAction="http://tempuri.org/IUserService/GetUserResponse")]
        System.Threading.Tasks.Task<Commonlayer.User> GetUserAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserRoles", ReplyAction="http://tempuri.org/IUserService/GetUserRolesResponse")]
        Commonlayer.Role[] GetUserRoles(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserRoles", ReplyAction="http://tempuri.org/IUserService/GetUserRolesResponse")]
        System.Threading.Tasks.Task<Commonlayer.Role[]> GetUserRolesAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserRolesV", ReplyAction="http://tempuri.org/IUserService/GetUserRolesVResponse")]
        Commonlayer.Views.RolesView[] GetUserRolesV(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserRolesV", ReplyAction="http://tempuri.org/IUserService/GetUserRolesVResponse")]
        System.Threading.Tasks.Task<Commonlayer.Views.RolesView[]> GetUserRolesVAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddCreditCard", ReplyAction="http://tempuri.org/IUserService/AddCreditCardResponse")]
        void AddCreditCard(string username, string creditcardt, string cvv, string holder, decimal number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddCreditCard", ReplyAction="http://tempuri.org/IUserService/AddCreditCardResponse")]
        System.Threading.Tasks.Task AddCreditCardAsync(string username, string creditcardt, string cvv, string holder, decimal number);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : TraderMarket.UserService.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<TraderMarket.UserService.IUserService>, TraderMarket.UserService.IUserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool isAuthenticationValid(string username, string password) {
            return base.Channel.isAuthenticationValid(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> isAuthenticationValidAsync(string username, string password) {
            return base.Channel.isAuthenticationValidAsync(username, password);
        }
        
        public void AddUser(string username, string password, string email, string name, string surname, string postcode, string town, long contactno, string residence, string street, string countrid, bool handlesdeliver, long accountnumber, string commission) {
            base.Channel.AddUser(username, password, email, name, surname, postcode, town, contactno, residence, street, countrid, handlesdeliver, accountnumber, commission);
        }
        
        public System.Threading.Tasks.Task AddUserAsync(string username, string password, string email, string name, string surname, string postcode, string town, long contactno, string residence, string street, string countrid, bool handlesdeliver, long accountnumber, string commission) {
            return base.Channel.AddUserAsync(username, password, email, name, surname, postcode, town, contactno, residence, street, countrid, handlesdeliver, accountnumber, commission);
        }
        
        public bool DoesUsernameExist(string username) {
            return base.Channel.DoesUsernameExist(username);
        }
        
        public System.Threading.Tasks.Task<bool> DoesUsernameExistAsync(string username) {
            return base.Channel.DoesUsernameExistAsync(username);
        }
        
        public bool DoesEmailExist(string email) {
            return base.Channel.DoesEmailExist(email);
        }
        
        public System.Threading.Tasks.Task<bool> DoesEmailExistAsync(string email) {
            return base.Channel.DoesEmailExistAsync(email);
        }
        
        public Commonlayer.User GetUser(string username) {
            return base.Channel.GetUser(username);
        }
        
        public System.Threading.Tasks.Task<Commonlayer.User> GetUserAsync(string username) {
            return base.Channel.GetUserAsync(username);
        }
        
        public Commonlayer.Role[] GetUserRoles(string username) {
            return base.Channel.GetUserRoles(username);
        }
        
        public System.Threading.Tasks.Task<Commonlayer.Role[]> GetUserRolesAsync(string username) {
            return base.Channel.GetUserRolesAsync(username);
        }
        
        public Commonlayer.Views.RolesView[] GetUserRolesV(string username) {
            return base.Channel.GetUserRolesV(username);
        }
        
        public System.Threading.Tasks.Task<Commonlayer.Views.RolesView[]> GetUserRolesVAsync(string username) {
            return base.Channel.GetUserRolesVAsync(username);
        }
        
        public void AddCreditCard(string username, string creditcardt, string cvv, string holder, decimal number) {
            base.Channel.AddCreditCard(username, creditcardt, cvv, holder, number);
        }
        
        public System.Threading.Tasks.Task AddCreditCardAsync(string username, string creditcardt, string cvv, string holder, decimal number) {
            return base.Channel.AddCreditCardAsync(username, creditcardt, cvv, holder, number);
        }
    }
}
